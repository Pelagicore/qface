# Generated from T4.g4 by ANTLR 4.10
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,333,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,28,1,28,3,28,222,8,28,1,29,1,29,1,29,5,29,227,8,29,10,29,
        12,29,230,9,29,1,29,1,29,1,30,1,30,1,30,5,30,237,8,30,10,30,12,30,
        240,9,30,1,30,1,30,1,31,1,31,5,31,246,8,31,10,31,12,31,249,9,31,
        1,32,3,32,252,8,32,1,32,4,32,255,8,32,11,32,12,32,256,1,33,1,33,
        1,33,1,33,4,33,263,8,33,11,33,12,33,264,1,34,1,34,1,34,5,34,270,
        8,34,10,34,12,34,273,9,34,1,35,1,35,5,35,277,8,35,10,35,12,35,280,
        9,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,5,37,291,8,37,
        10,37,12,37,294,9,37,1,37,1,37,1,37,1,38,4,38,300,8,38,11,38,12,
        38,301,1,38,1,38,1,39,1,39,1,39,1,39,5,39,310,8,39,10,39,12,39,313,
        9,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,321,8,40,10,40,12,40,324,
        9,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,2,292,322,0,42,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,0,1,0,10,2,0,34,34,92,92,2,0,39,
        39,92,92,2,0,10,10,13,13,2,0,43,43,45,45,3,0,48,57,65,70,97,102,
        3,0,65,90,95,95,97,122,5,0,46,46,48,57,65,90,95,95,97,122,1,0,48,
        57,3,0,9,10,13,13,32,32,8,0,34,34,47,47,92,92,98,98,102,102,110,
        110,114,114,116,116,346,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,85,1,0,0,0,3,92,1,0,0,0,5,94,
        1,0,0,0,7,101,1,0,0,0,9,111,1,0,0,0,11,119,1,0,0,0,13,121,1,0,0,
        0,15,123,1,0,0,0,17,128,1,0,0,0,19,130,1,0,0,0,21,132,1,0,0,0,23,
        138,1,0,0,0,25,145,1,0,0,0,27,147,1,0,0,0,29,156,1,0,0,0,31,158,
        1,0,0,0,33,163,1,0,0,0,35,167,1,0,0,0,37,172,1,0,0,0,39,179,1,0,
        0,0,41,183,1,0,0,0,43,188,1,0,0,0,45,190,1,0,0,0,47,192,1,0,0,0,
        49,196,1,0,0,0,51,202,1,0,0,0,53,209,1,0,0,0,55,214,1,0,0,0,57,221,
        1,0,0,0,59,223,1,0,0,0,61,233,1,0,0,0,63,243,1,0,0,0,65,251,1,0,
        0,0,67,258,1,0,0,0,69,266,1,0,0,0,71,274,1,0,0,0,73,281,1,0,0,0,
        75,285,1,0,0,0,77,299,1,0,0,0,79,305,1,0,0,0,81,316,1,0,0,0,83,330,
        1,0,0,0,85,86,5,105,0,0,86,87,5,109,0,0,87,88,5,112,0,0,88,89,5,
        111,0,0,89,90,5,114,0,0,90,91,5,116,0,0,91,2,1,0,0,0,92,93,5,59,
        0,0,93,4,1,0,0,0,94,95,5,109,0,0,95,96,5,111,0,0,96,97,5,100,0,0,
        97,98,5,117,0,0,98,99,5,108,0,0,99,100,5,101,0,0,100,6,1,0,0,0,101,
        102,5,105,0,0,102,103,5,110,0,0,103,104,5,116,0,0,104,105,5,101,
        0,0,105,106,5,114,0,0,106,107,5,102,0,0,107,108,5,97,0,0,108,109,
        5,99,0,0,109,110,5,101,0,0,110,8,1,0,0,0,111,112,5,101,0,0,112,113,
        5,120,0,0,113,114,5,116,0,0,114,115,5,101,0,0,115,116,5,110,0,0,
        116,117,5,100,0,0,117,118,5,115,0,0,118,10,1,0,0,0,119,120,5,123,
        0,0,120,12,1,0,0,0,121,122,5,125,0,0,122,14,1,0,0,0,123,124,5,118,
        0,0,124,125,5,111,0,0,125,126,5,105,0,0,126,127,5,100,0,0,127,16,
        1,0,0,0,128,129,5,40,0,0,129,18,1,0,0,0,130,131,5,41,0,0,131,20,
        1,0,0,0,132,133,5,99,0,0,133,134,5,111,0,0,134,135,5,110,0,0,135,
        136,5,115,0,0,136,137,5,116,0,0,137,22,1,0,0,0,138,139,5,115,0,0,
        139,140,5,105,0,0,140,141,5,103,0,0,141,142,5,110,0,0,142,143,5,
        97,0,0,143,144,5,108,0,0,144,24,1,0,0,0,145,146,5,61,0,0,146,26,
        1,0,0,0,147,148,5,114,0,0,148,149,5,101,0,0,149,150,5,97,0,0,150,
        151,5,100,0,0,151,152,5,111,0,0,152,153,5,110,0,0,153,154,5,108,
        0,0,154,155,5,121,0,0,155,28,1,0,0,0,156,157,5,44,0,0,157,30,1,0,
        0,0,158,159,5,98,0,0,159,160,5,111,0,0,160,161,5,111,0,0,161,162,
        5,108,0,0,162,32,1,0,0,0,163,164,5,105,0,0,164,165,5,110,0,0,165,
        166,5,116,0,0,166,34,1,0,0,0,167,168,5,114,0,0,168,169,5,101,0,0,
        169,170,5,97,0,0,170,171,5,108,0,0,171,36,1,0,0,0,172,173,5,115,
        0,0,173,174,5,116,0,0,174,175,5,114,0,0,175,176,5,105,0,0,176,177,
        5,110,0,0,177,178,5,103,0,0,178,38,1,0,0,0,179,180,5,118,0,0,180,
        181,5,97,0,0,181,182,5,114,0,0,182,40,1,0,0,0,183,184,5,108,0,0,
        184,185,5,105,0,0,185,186,5,115,0,0,186,187,5,116,0,0,187,42,1,0,
        0,0,188,189,5,60,0,0,189,44,1,0,0,0,190,191,5,62,0,0,191,46,1,0,
        0,0,192,193,5,109,0,0,193,194,5,97,0,0,194,195,5,112,0,0,195,48,
        1,0,0,0,196,197,5,109,0,0,197,198,5,111,0,0,198,199,5,100,0,0,199,
        200,5,101,0,0,200,201,5,108,0,0,201,50,1,0,0,0,202,203,5,115,0,0,
        203,204,5,116,0,0,204,205,5,114,0,0,205,206,5,117,0,0,206,207,5,
        99,0,0,207,208,5,116,0,0,208,52,1,0,0,0,209,210,5,101,0,0,210,211,
        5,110,0,0,211,212,5,117,0,0,212,213,5,109,0,0,213,54,1,0,0,0,214,
        215,5,102,0,0,215,216,5,108,0,0,216,217,5,97,0,0,217,218,5,103,0,
        0,218,56,1,0,0,0,219,222,3,59,29,0,220,222,3,61,30,0,221,219,1,0,
        0,0,221,220,1,0,0,0,222,58,1,0,0,0,223,228,5,34,0,0,224,227,3,83,
        41,0,225,227,8,0,0,0,226,224,1,0,0,0,226,225,1,0,0,0,227,230,1,0,
        0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,231,1,0,0,0,230,228,1,0,
        0,0,231,232,5,34,0,0,232,60,1,0,0,0,233,238,5,39,0,0,234,237,3,83,
        41,0,235,237,8,1,0,0,236,234,1,0,0,0,236,235,1,0,0,0,237,240,1,0,
        0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,
        0,0,241,242,5,39,0,0,242,62,1,0,0,0,243,247,5,64,0,0,244,246,8,2,
        0,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,
        0,0,248,64,1,0,0,0,249,247,1,0,0,0,250,252,7,3,0,0,251,250,1,0,0,
        0,251,252,1,0,0,0,252,254,1,0,0,0,253,255,2,48,57,0,254,253,1,0,
        0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,66,1,0,0,
        0,258,259,5,48,0,0,259,260,5,120,0,0,260,262,1,0,0,0,261,263,7,4,
        0,0,262,261,1,0,0,0,263,264,1,0,0,0,264,262,1,0,0,0,264,265,1,0,
        0,0,265,68,1,0,0,0,266,267,5,64,0,0,267,271,7,5,0,0,268,270,7,6,
        0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,
        0,0,272,70,1,0,0,0,273,271,1,0,0,0,274,278,7,5,0,0,275,277,7,6,0,
        0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,
        0,279,72,1,0,0,0,280,278,1,0,0,0,281,282,7,7,0,0,282,283,5,46,0,
        0,283,284,7,7,0,0,284,74,1,0,0,0,285,286,5,47,0,0,286,287,5,42,0,
        0,287,288,5,42,0,0,288,292,1,0,0,0,289,291,9,0,0,0,290,289,1,0,0,
        0,291,294,1,0,0,0,292,293,1,0,0,0,292,290,1,0,0,0,293,295,1,0,0,
        0,294,292,1,0,0,0,295,296,5,42,0,0,296,297,5,47,0,0,297,76,1,0,0,
        0,298,300,7,8,0,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,0,0,
        0,301,302,1,0,0,0,302,303,1,0,0,0,303,304,6,38,0,0,304,78,1,0,0,
        0,305,306,5,47,0,0,306,307,5,47,0,0,307,311,1,0,0,0,308,310,8,2,
        0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,
        0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,6,39,0,0,315,80,1,0,
        0,0,316,317,5,47,0,0,317,318,5,42,0,0,318,322,1,0,0,0,319,321,9,
        0,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,323,1,0,0,0,322,320,1,
        0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,5,42,0,0,326,327,5,
        47,0,0,327,328,1,0,0,0,328,329,6,40,0,0,329,82,1,0,0,0,330,331,5,
        92,0,0,331,332,7,9,0,0,332,84,1,0,0,0,16,0,221,226,228,236,238,247,
        251,256,264,271,278,292,301,311,322,1,6,0,0
    ]

class T4Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    STRING = 29
    DOUBLE_STRING = 30
    SINGLE_STRING = 31
    TAGLINE = 32
    INTCONSTANT = 33
    HEXCONSTANT = 34
    TAGIDENTIFIER = 35
    IDENTIFIER = 36
    VERSION = 37
    DOCCOMMENT = 38
    WHITESPACE = 39
    COMMENT = 40
    MULTICOMM = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'import'", "';'", "'module'", "'interface'", "'extends'", "'{'", 
            "'}'", "'void'", "'('", "')'", "'const'", "'signal'", "'='", 
            "'readonly'", "','", "'bool'", "'int'", "'real'", "'string'", 
            "'var'", "'list'", "'<'", "'>'", "'map'", "'model'", "'struct'", 
            "'enum'", "'flag'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "DOUBLE_STRING", "SINGLE_STRING", "TAGLINE", "INTCONSTANT", 
            "HEXCONSTANT", "TAGIDENTIFIER", "IDENTIFIER", "VERSION", "DOCCOMMENT", 
            "WHITESPACE", "COMMENT", "MULTICOMM" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "STRING", "DOUBLE_STRING", "SINGLE_STRING", 
                  "TAGLINE", "INTCONSTANT", "HEXCONSTANT", "TAGIDENTIFIER", 
                  "IDENTIFIER", "VERSION", "DOCCOMMENT", "WHITESPACE", "COMMENT", 
                  "MULTICOMM", "ESC" ]

    grammarFileName = "T4.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


